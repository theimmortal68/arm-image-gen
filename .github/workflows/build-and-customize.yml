name: Build and Customize (Klipper Suite)

on:
  push:
    branches: [ master, develop, "**" ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        device: [ rpi64 ]   # add more later, e.g. orangepi5max
    env:
      DEVICE: ${{ matrix.device }}
      ENLARGEROOT: "8000"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install mmdebstrap (v1.5.7) + bdebstrap (GitHub) + host deps
        env:
          MMDEBSTRAP_REF: "1.5.7"      # tag name on GitLab (try without/with 'v' prefix)
          BDEBSTRAP_REF:  "v0.7.0"     # pick a tag or 'main'
        shell: bash
        run: |
          set -euo pipefail

          MM_TAG="${MMDEBSTRAP_REF:-1.5.7}"
          BDEB_REF="${BDEBSTRAP_REF:-v0.7.0}"

          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            qemu-user-static binfmt-support pandoc arch-test \
            ca-certificates curl wget jq git unzip rsync \
            parted dosfstools e2fsprogs kpartx xz-utils \
            util-linux udev mount kmod file perl python3-pip \
            debian-archive-keyring

          sudo update-binfmts --enable qemu-aarch64 || true
          sudo update-binfmts --enable qemu-arm || true
          arch-test arm64
          qemu-aarch64-static --version

          # ---- mmdebstrap from GitLab (exact tag) ----
          rm -rf mmdebstrap-src
          git clone --depth=1 --branch "${MM_TAG}" \
            https://gitlab.mister-muffin.de/josch/mmdebstrap.git mmdebstrap-src || {
            echo "Direct clone of tag ${MM_TAG} failed, trying with 'v' prefixâ€¦"
            git clone --depth=1 --branch "v${MM_TAG}" \
              https://gitlab.mister-muffin.de/josch/mmdebstrap.git mmdebstrap-src
          }
          sudo install -D -m 0755 mmdebstrap-src/mmdebstrap /usr/local/bin/mmdebstrap
          [ -f mmdebstrap-src/mmdebstrap.1 ] && \
            sudo install -D -m 0644 mmdebstrap-src/mmdebstrap.1 /usr/local/share/man/man1/mmdebstrap.1 || true
          [ -d mmdebstrap-src/share/mmdebstrap ] && \
            sudo mkdir -p /usr/local/share/mmdebstrap && \
            sudo cp -a mmdebstrap-src/share/mmdebstrap/. /usr/local/share/mmdebstrap/ || true

          # -------- bdebstrap from upstream GitHub --------
          python3 -m pip install --user --upgrade pip wheel
          python3 -m pip install --user "git+https://github.com/bdrung/bdebstrap@${BDEB_REF}"
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Build rootfs with bdebstrap
        run: |
          bash scripts/build-bdebstrap.sh "${DEVICE}" "devices/${DEVICE}/layers.yaml" "out/${DEVICE}-bookworm-arm64"

      - name: Make bootable image (Raspberry Pi)
        if: matrix.device == 'rpi64'
        run: |
          sudo bash scripts/make-img-rpi.sh "out/${DEVICE}-bookworm-arm64/rootfs" "build/input-${DEVICE}.img"

      # Example placeholder for other devices:
      # - name: Make bootable image (Orange Pi 5 Max)
      #   if: matrix.device == 'orangepi5max'
      #   run: |
      #     echo "TODO: add orange pi image builder (u-boot/extlinux)"; exit 1

      # --- CustoPiZer (RAW DOCKER) with explicit DNS and proper script mount ---
      - name: Create CustoPiZer config.local
        shell: bash
        run: |
          set -eux

          # raspbian for Raspberry Pi, armbian for others
          case "${DEVICE:-rpi64}" in
            rpi*|raspberrypi* ) DISTRO="raspbian" ;;
            * )                 DISTRO="armbian"  ;;
          esac

          cat > "${GITHUB_WORKSPACE}/config.local" <<'EOF'
          # Auto-generated by GitHub Actions
          EDITBASE_DISTRO=@DISTRO@
          EDITBASE_MOUNT_PROC=1
          EDITBASE_MOUNT_SYS=1
          EDITBASE_IMAGE_ENLARGEROOT=8000
          EDITBASE_IMAGE_RESIZEROOT=100
          EDITBASE_ARCH=arm64
          EOF

          sed -i "s/@DISTRO@/${DISTRO}/g" "${GITHUB_WORKSPACE}/config.local"

      - name: Ensure scripts dir & perms
        shell: bash
        run: |
          set -eux
          test -d scripts
          chmod -R a+rx scripts

      - name: Fix build directory ownership (pre-normalize)
        shell: bash
        run: |
          set -eux
          sudo mkdir -p build
          sudo chown -R "$USER":"$USER" build
          chmod -R u+rwX build

      - name: Normalize input image name to build/input.img
        shell: bash
        run: |
          set -eux
          sudo rm -f build/input.img || true
          if [[ -f "build/input-${DEVICE}.img" ]]; then
            sudo chown "$USER":"$USER" "build/input-${DEVICE}.img"
            mv -f "build/input-${DEVICE}.img" "build/input.img"
          fi
          test -s build/input.img

      - name: Pull CustoPiZer image (for reliability)
        run: |
          set -eux
          docker pull ghcr.io/octoprint/custopizer:latest

      - name: Sanitize CustoPiZer scripts (no sudo in chroot)
        shell: bash
        run: |
          set -eux
          test -d scripts
          # Replace common sudo patterns with chroot-safe equivalents
          for f in scripts/*.sh; do
            # Skip non-regular files
            [ -f "$f" ] || continue
            sed -i \
              -e 's/sudo[[:space:]]\+-u[[:space:]]\+pi[[:space:]]\+/runuser -u pi -- /g' \
              -e 's/\bsudo[[:space:]]\+apt-get\b/apt-get/g' \
              -e 's/\bsudo[[:space:]]\+apt\b/apt/g' \
              -e 's/\bsudo[[:space:]]\+systemctl\b/systemctl/g' \
              -e 's/\bsudo[[:space:]]\+chown\b/chown/g' \
              "$f"
            # Drop any lingering attempts to install policykit-1 in chroot
            sed -i -e '/apt-get[[:space:]]\+-y[[:space:]]\+install[[:space:]]\+policykit-1/d' "$f" || true
          done
          chmod -R a+rx scripts

      - name: Run CustoPiZer (raw docker with DNS)
        shell: bash
        run: |
          set -eux
          # Workspace must contain:
          #   /CustoPiZer/workspace/input.img
          #   /CustoPiZer/workspace/scripts/  (your repo scripts)
          docker run --rm --privileged \
            --dns 8.8.8.8 --dns 1.1.1.1 \
            -v "${GITHUB_WORKSPACE}/build:/CustoPiZer/workspace" \
            -v "${GITHUB_WORKSPACE}/scripts:/CustoPiZer/workspace/scripts" \
            -v "${GITHUB_WORKSPACE}/config.local:/CustoPiZer/config.local" \
            ghcr.io/octoprint/custopizer:latest

          # Rename output for artifacts
          mv -f "${GITHUB_WORKSPACE}/build/output.img" \
                "${GITHUB_WORKSPACE}/build/output-${DEVICE}.img"

      - name: Take ownership of output (post-CustoPiZer)
        shell: bash
        run: |
          set -eux
          sudo chown -R "$USER":"$USER" build
          chmod -R u+rwX build

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: output-${{ env.DEVICE }}.img
          path: build/output-${{ env.DEVICE }}.img
