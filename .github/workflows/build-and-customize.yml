name: Build and Customize (Klipper Suite)

on:
  push:
    branches: [ master, develop, "**" ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        device: [ rpi64 ]   # add more later, e.g. orangepi5max
    env:
      DEVICE: ${{ matrix.device }}
      ENLARGEROOT: "8000"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install host deps (mmdebstrap, qemu-user, tooling)
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            mmdebstrap qemu-user-static binfmt-support \
            ca-certificates curl wget jq git unzip rsync \
            parted dosfstools e2fsprogs kpartx xz-utils \
            util-linux udev mount kmod python3-pip
          python3 -m pip install --user --upgrade pip
          python3 -m pip install --user bdebstrap
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Tool versions
        run: |
          mmdebstrap --version || true
          bdebstrap --version || true
          qemu-aarch64-static --version || true
          docker --version || true
          uname -a

      - name: Build rootfs with bdebstrap
        run: |
          bash scripts/build-bdebstrap.sh "${DEVICE}" "devices/${DEVICE}/layers.yaml" "out/${DEVICE}-bookworm-arm64"

      - name: Make bootable image (Raspberry Pi)
        if: matrix.device == 'rpi64'
        run: |
          sudo bash scripts/make-img-rpi.sh "out/${DEVICE}-bookworm-arm64/rootfs" "build/input-${DEVICE}.img"

      # Example placeholder for other devices:
      # - name: Make bootable image (Orange Pi 5 Max)
      #   if: matrix.device == 'orangepi5max'
      #   run: |
      #     echo "TODO: add orange pi image builder (u-boot/extlinux)"; exit 1

      - name: Customize with CustoPiZer (Klipper Suite)
        run: |
          bash scripts/run-custopizer.sh "build/input-${DEVICE}.img" "build/output-${DEVICE}.img" "${ENLARGEROOT}"

      - name: Summarize output
        run: |
          ls -lh build || true
          stat "build/output-${DEVICE}.img" || true

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.device }}-image
          path: build/output-${{ matrix.device }}.img
          if-no-files-found: error
          retention-days: 7
